// <auto-generated />
using System;
using EconomyMonitor.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EconomyMonitor.Data.Migrations
{
    [DbContext(typeof(AppRepository))]
    [Migration("20220726180437_MadeStartingBudgetNotNullable")]
    partial class MadeStartingBudgetNotNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0-preview.6.22329.4");

            modelBuilder.Entity("EconomyMonitor.Data.Entities.MoneyDuringDayEntityBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MoneyForDayId")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MoneyDuringDays");

                    b.HasDiscriminator<string>("Discriminator").HasValue("MoneyDuringDayEntityBase");
                });

            modelBuilder.Entity("EconomyMonitor.Data.Entities.MoneyForDayEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .IsUnique();

                    b.HasIndex("DateCreated");

                    b.HasIndex("DateModified");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("MoneyForDays");
                });

            modelBuilder.Entity("EconomyMonitor.Data.Entities.SettingsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("StartingBudget")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DateCreated");

                    b.HasIndex("DateModified");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FriendlyName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Xml")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("EconomyMonitor.Data.Entities.EarningEntity", b =>
                {
                    b.HasBaseType("EconomyMonitor.Data.Entities.MoneyDuringDayEntityBase");

                    b.HasIndex("DateCreated");

                    b.HasIndex("DateModified");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("MoneyForDayId");

                    b.HasDiscriminator().HasValue("EarningEntity");
                });

            modelBuilder.Entity("EconomyMonitor.Data.Entities.ExpenseEntity", b =>
                {
                    b.HasBaseType("EconomyMonitor.Data.Entities.MoneyDuringDayEntityBase");

                    b.HasIndex("DateCreated");

                    b.HasIndex("DateModified");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("MoneyForDayId");

                    b.HasDiscriminator().HasValue("ExpenseEntity");
                });

            modelBuilder.Entity("EconomyMonitor.Data.Entities.EarningEntity", b =>
                {
                    b.HasOne("EconomyMonitor.Data.Entities.MoneyForDayEntity", "MoneyFlowForDay")
                        .WithMany("Earnings")
                        .HasForeignKey("MoneyForDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MoneyFlowForDay");
                });

            modelBuilder.Entity("EconomyMonitor.Data.Entities.ExpenseEntity", b =>
                {
                    b.HasOne("EconomyMonitor.Data.Entities.MoneyForDayEntity", "MoneyFlowForDay")
                        .WithMany("Expenses")
                        .HasForeignKey("MoneyForDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MoneyFlowForDay");
                });

            modelBuilder.Entity("EconomyMonitor.Data.Entities.MoneyForDayEntity", b =>
                {
                    b.Navigation("Earnings");

                    b.Navigation("Expenses");
                });
#pragma warning restore 612, 618
        }
    }
}
